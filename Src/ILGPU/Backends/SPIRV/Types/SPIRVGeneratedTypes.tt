<#@ template hostspecific="true" language="C#" #>
<#@ include file="../SPIRVXMLReader.ttinclude"#>
<#@ output extension=".cs"#>
<#@ assembly name="System.Xml" #>
<#
    const string standardIndent = "    ";
#>
using System;
using System.Collections.Generic;

namespace ILGPU.Backends.SPIRV.Types
{
<#
    var grammar = LoadGrammar(Host.ResolvePath("../spirv.grammar.xml"));

    PushIndent(standardIndent);

    foreach (var kind in grammar.Types.Types)
    {
        GenerateType(kind);
    }

    void GenerateType(SPIRVType kind)
    {
        switch (kind.Category)
        {
            case "Id":
                GenerateId(kind);
                break;
            case "BitEnum":
                GenerateEnum(kind, 16);
                break;
            case "ValueEnum":
                GenerateEnum(kind, 10);
                break;
            case "Composite":
                GenerateComposite(kind);
                break;
        }
    }

    void GenerateId(SPIRVType kind)
    {
#>public struct <#= kind.Name #> : ISPIRVType
{
    private SPIRVWord value;

    public <#= kind.Name #>(SPIRVWord word)
    {
        value = word;
    }

    public SPIRVWord[] ToWords() => new SPIRVWord[] { value };

    public string ToRepr() => "%" + value;
}
<#
    }

    void GenerateEnum(SPIRVType kind, int valueBase)
    {
#>public struct <#= kind.Name #> : ISPIRVType
{
    private SPIRVWord value;
    private string repr;

    private <#= kind.Name #>(SPIRVWord word, string name) {
        value = word;
        repr = name;
    }

<#
        PushIndent(standardIndent);
        foreach (var enumerant in kind.Enumerants.Enumerants)
        {
            uint enumValue = Convert.ToUInt32(enumerant.Value, valueBase);
            string enumName = enumerant.Name;
            string kindName = kind.Name;
#>public static readonly <#= kindName #> <#=enumName #> =
        new <#= kindName #>(<#= enumValue #>, "<#=enumName #>");
<#
        }

        PopIndent();
#>

    public SPIRVWord[] ToWords() =>
        new SPIRVWord[] { SPIRVWord.FromBytes(BitConverter.GetBytes(value.Data)) };

    public string ToRepr() => repr;
}

<#
    }

    void GenerateComposite(SPIRVType kind)
    {
#>public struct <#= kind.Name #> : ISPIRVType
{
<#
        PushIndent(standardIndent);
        for (int i = 0; i < kind.Bases.Bases.Count; i++)
        {
#>public <#=kind.Bases.Bases[i] #> base<#= i #>;
<#
        }
#>

public SPIRVWord[] ToWords() {
    List<SPIRVWord> words = new List<SPIRVWord>();
<#
        PushIndent(standardIndent);
        for (int i = 0; i < kind.Bases.Bases.Count; i++)
        {
#>words.AddRange(base<#=i #>.ToWords());
<#
        }
        PopIndent();
#>
    return words.ToArray();
}

public string ToRepr() {
    string repr = "{ ";
<#
        PushIndent(standardIndent);
        for (int i = 0; i < kind.Bases.Bases.Count; i++)
        {
#>repr += $"base<#=i #> = {base<#=i #>.ToRepr()} ";
<#
        }
        PopIndent();
#>
    repr += "}";
    return repr;
}
<#
        PopIndent();
#>
}
<#
    }

    PopIndent();
#>
}