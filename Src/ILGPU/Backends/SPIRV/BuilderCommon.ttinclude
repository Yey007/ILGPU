<#@ import namespace="System.Collections.Generic" #>
<#@ include file="SPIRVXMLReader.ttinclude"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Linq"#>
<#
    var grammar = LoadGrammar(Host.ResolvePath("./spirv.grammar.xml"));
    const string standardIndent = "    ";

    string GenerateParamName(SPIRVOperand operand, int fallbackIndex)
    {
        string paramName = operand.Type switch
        {
            "IdResult" => "resultId",
            "IdResultType" => "resultType",
            _ => operand.Name ?? $"param{fallbackIndex}"
        };

        return paramName;
    }

    string GenerateFullParam(SPIRVOperand operand, string paramName)
    {
        var type = operand.Type;
        var fullParam = operand.Quantifier switch
        {
            "*" => $"params {type}[] {paramName}",
            "?" => $"{type}? {paramName} = null",
            _ => $"{type} {paramName}"
        };

        return fullParam;
    }

    List<(SPIRVOperand operand, string name)> GenerateParamInfos(SPIRVOp instruction)
    {
        List<SPIRVOperand> operands = instruction.Operands?.Operands;
        var pairs = new List<(SPIRVOperand, string)>();

        if (operands == null)
            return pairs;

        for (int i = 0; i < operands.Count; i++)
        {
            var operand = operands[i];
            string paramName = GenerateParamName(operand, i);

            pairs.Add((operand, paramName));
        }

        return pairs;
    }

    void CreateHeader(string opName, List<(SPIRVOperand operand, string name)> paramInfos)
    {
#>public void Generate<#= opName #>(<#

        var names = paramInfos.Select(x => GenerateFullParam(x.operand, x.name));
#><#= string.Join(", ", names)#><#
#>)<#
    }

#>
