<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs"#>
<#@ include file="BuilderCommon.ttinclude"
#><#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core"#>
using System;
using ILGPU.Backends.SPIRV.Types;

#nullable enable

namespace ILGPU.Backends.SPIRV
{

<#
    PushIndent(standardIndent);
#>
/// <summary>
/// Defines utility methods to generate SPIRV operations
/// </summary>
[CLSCompliant(false)]
public interface ISPIRVBuilder
{
    byte[] ToByteArray();

    void AddMetadata(uint magic, uint version, uint genMagic, uint bound, uint schema);

    // This is the best way I could come up with to
    // handle trying to merge different builders
    // Implementing classes will kinda just have to
    // deal with it
    void Merge(ISPIRVBuilder other);

<#
    PushIndent(standardIndent);
    foreach (var instruction in grammar.Instructions.Instructions)
    {
        var paramInfos = GenerateParamInfos(instruction);
        CreateHeader(instruction.OpName, paramInfos);
#>;

<#
    }
    PopIndent();
#>
}
<#
    PopIndent();
#>
}
#nullable restore