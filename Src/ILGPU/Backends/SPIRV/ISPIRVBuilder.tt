<#@ template language="C#" #>
<#@ output extension=".cs"#>
<#@ include file="SPIRVTypeMappings.ttinclude"#>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#const string standardIndent = "    ";#>
namespace ILGPU.Backends.SPIRV {

<#
    PushIndent(standardIndent);
#>
public interface ISPIRVBuilder {

<#
    PushIndent(standardIndent);
    foreach (var instruction in grammar.Instructions.Instructions)
    {
#>public void Generate<#= instruction.OpName #>(<#
        if (instruction.Operands?.Operands is not null)
        {
            var list = instruction.Operands.Operands;
            list.RemoveAll(x => x.Kind == "IdResult");
            for(int i = 0 ; i < list.Count; i++)
            {
                var operand = list[i];

                var paramName = operand.Name ?? $"param{i}";
#><#= typeMap[operand.Kind] + " " + paramName#><#
                if (i != list.Count - 1)
                {
#>, <#
                }
            }
        }
#>);

<#
    }
    PopIndent();
#>
}
<#
    PopIndent();
#>
}
