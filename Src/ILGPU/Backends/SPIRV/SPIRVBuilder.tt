<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs"#>
<#@ include file="SPIRVTypeMappings.ttinclude"#>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Threading" #>
<#
    var grammar = LoadGrammar();
    var typeMap = LoadTypeMap();
    const string standardIndent = "    ";

    bool IsInstructionCLSCompliant(SPIRVOp inst)
    {
        var list = inst.Operands?.Operands;
        if (list != null)
        {
            foreach (var operand in list)
            {
                if (!IsCLSCompliant(operand.Type))
                {
                    return false;
                }
            }
            return true;
        }
        return true;
    }

    bool HasReturn(SPIRVOp inst)
    {
        var list = inst.Operands?.Operands;
        return list != null && list.Exists(op => op.Type == "IdResult");
    }

    string GenerateParam(SPIRVOperand operand, string paramName)
    {
        var type = typeMap[operand.Type];
        var fullParam = $"{type} {paramName}";
        if (operand.Quantifier == "*")
        {
            fullParam = $"params {type}[] {paramName}";
        }
        else if (operand.Quantifier == "?")
        {
            fullParam = $"{type}? {paramName} = null";
        }

        return fullParam;
    }
#>
using System;
using System.Collections.Generic;

#nullable enable
#pragma warning disable 1591

namespace ILGPU.Backends.SPIRV {

<#
    PushIndent(standardIndent);
#>
/// <summary>
/// Defines utility methods to generate SPIRV operations
/// </summary>
[CLSCompliant(false)]
public class SPIRVBuilder {

    public List<uint> Instructions { get; } = new List<uint>();

<#
    PushIndent(standardIndent);
    foreach (var instruction in grammar.Instructions.Instructions)
    {
        if (!IsInstructionCLSCompliant(instruction))
        {
#>[CLSCompliant(false)]
<#
        }

        var list = instruction.Operands?.Operands;
        var parameters = new List<string>();

        if (list == null)
        {
            continue;
        }

#>public void Generate<#= instruction.OpName #>(<#

        // Result should be at the front
        var resultOperand = list.Find(x => x.Type == "IdResult");
        if (resultOperand != null)
        {
            list.Remove(resultOperand);
            list.Insert(0, resultOperand);
        }

        for (int i = 0; i < list.Count; i++)
        {
            var operand = list[i];
            string paramName = operand.Name ?? $"param{i}";

            if (operand.Type == "IdResult")
            {
                paramName = "returnId";
            }

            parameters.Add(paramName);

            var fullParam = GenerateParam(operand, paramName);
#><#= fullParam #><#
            if (i != list.Count - 1)
            {
#>, <#
            }
        }
#>) {
<#
        PushIndent(standardIndent);
#>var tempList = new List<uint>();
<#
        foreach (var param in parameters)
        {
#>tempList.AddRange(SPIRVBuilderUtils.ToUintList(<#= param #>));
<#
        }
#><#// Add 1 to the word count for the first word (what we are creating here)#>
ushort opCode = <#= instruction.OpCode#>;
ushort wordCount = (ushort) (tempList.Count + 1);
uint combinedWord = SPIRVBuilderUtils.JoinOpCodeWordCount(opCode, wordCount);
Instructions.Add(combinedWord);
Instructions.AddRange(tempList);
<# PopIndent(); #>
}

<#
    }
    PopIndent();
#>
}
<#
    PopIndent();
#>
}
#pragma warning restore 1591